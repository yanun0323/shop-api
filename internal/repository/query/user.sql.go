// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package query

import (
	"context"
)

const countUser = `-- name: CountUser :one
SELECT COUNT(*) FROM ` + "`" + `user` + "`" + ` WHERE ` + "`" + `email` + "`" + ` = ? LIMIT 1
`

func (q *Queries) CountUser(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUser, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :execlastid
INSERT INTO ` + "`" + `user` + "`" + ` (` + "`" + `name` + "`" + `, ` + "`" + `email` + "`" + `, ` + "`" + `password` + "`" + `) 
VALUES (?, ?, ?)
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser, arg.Name, arg.Email, arg.Password)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM ` + "`" + `user` + "`" + ` WHERE ` + "`" + `id` + "`" + ` = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, created_at, updated_at, deleted_at FROM ` + "`" + `user` + "`" + ` WHERE ` + "`" + `email` + "`" + ` = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
