// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: token.sql

package query

import (
	"context"
)

const countToken = `-- name: CountToken :one
SELECT COUNT(*) FROM ` + "`" + `token` + "`" + ` 
WHERE ` + "`" + `user_id` + "`" + ` = ? AND ` + "`" + `device_id` + "`" + ` = ? AND ` + "`" + `expired_at` + "`" + ` > ?
`

type CountTokenParams struct {
	UserID    int64  `json:"user_id"`
	DeviceID  string `json:"device_id"`
	ExpiredAt int64  `json:"expired_at"`
}

func (q *Queries) CountToken(ctx context.Context, arg CountTokenParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countToken, arg.UserID, arg.DeviceID, arg.ExpiredAt)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createToken = `-- name: CreateToken :exec
INSERT INTO ` + "`" + `token` + "`" + ` (` + "`" + `user_id` + "`" + `, ` + "`" + `device_id` + "`" + `, ` + "`" + `refresh_token` + "`" + `, ` + "`" + `expired_at` + "`" + `) 
VALUES (?, ?, ?, ?)
ON DUPLICATE KEY UPDATE 
    ` + "`" + `refresh_token` + "`" + ` = VALUES(` + "`" + `refresh_token` + "`" + `),
    ` + "`" + `expired_at` + "`" + ` = VALUES(` + "`" + `expired_at` + "`" + `),
    ` + "`" + `updated_at` + "`" + ` = UNIX_TIMESTAMP()
`

type CreateTokenParams struct {
	UserID       int64  `json:"user_id"`
	DeviceID     string `json:"device_id"`
	RefreshToken string `json:"refresh_token"`
	ExpiredAt    int64  `json:"expired_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.ExecContext(ctx, createToken,
		arg.UserID,
		arg.DeviceID,
		arg.RefreshToken,
		arg.ExpiredAt,
	)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM ` + "`" + `token` + "`" + ` WHERE ` + "`" + `user_id` + "`" + ` = ? AND ` + "`" + `device_id` + "`" + ` = ?
`

type DeleteTokenParams struct {
	UserID   int64  `json:"user_id"`
	DeviceID string `json:"device_id"`
}

func (q *Queries) DeleteToken(ctx context.Context, arg DeleteTokenParams) error {
	_, err := q.db.ExecContext(ctx, deleteToken, arg.UserID, arg.DeviceID)
	return err
}

const getToken = `-- name: GetToken :one
SELECT id, user_id, device_id, refresh_token, created_at, updated_at, expired_at FROM ` + "`" + `token` + "`" + ` 
WHERE ` + "`" + `user_id` + "`" + ` = ? AND ` + "`" + `device_id` + "`" + ` = ? AND ` + "`" + `expired_at` + "`" + ` > ?
`

type GetTokenParams struct {
	UserID    int64  `json:"user_id"`
	DeviceID  string `json:"device_id"`
	ExpiredAt int64  `json:"expired_at"`
}

func (q *Queries) GetToken(ctx context.Context, arg GetTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, getToken, arg.UserID, arg.DeviceID, arg.ExpiredAt)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceID,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
